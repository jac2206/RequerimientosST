//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RequerimientosST.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class PruebaTecnicaJulianArangoEntities : DbContext
    {
        public PruebaTecnicaJulianArangoEntities()
            : base("name=PruebaTecnicaJulianArangoEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual ObjectResult<uspObtenerMaestroArea_Result> uspObtenerMaestroArea()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspObtenerMaestroArea_Result>("uspObtenerMaestroArea");
        }
    
        public virtual ObjectResult<uspObtenerMaestroIngeniero_Result> uspObtenerMaestroIngeniero()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspObtenerMaestroIngeniero_Result>("uspObtenerMaestroIngeniero");
        }
    
        public virtual ObjectResult<uspObtenerMaestroPrioridad_Result> uspObtenerMaestroPrioridad()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspObtenerMaestroPrioridad_Result>("uspObtenerMaestroPrioridad");
        }
    
        public virtual ObjectResult<uspObtenerRequerimientos_Result> uspObtenerRequerimientos()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<uspObtenerRequerimientos_Result>("uspObtenerRequerimientos");
        }
    
        public virtual int uspGuardarRequerimientos(string area, string aplicativo, string alcance, Nullable<System.DateTime> fechaSolicitud, string prioridad, string ingeniero, Nullable<int> diasDesarrollo, Nullable<System.DateTime> fechaDesarrollo)
        {
            var areaParameter = area != null ?
                new ObjectParameter("Area", area) :
                new ObjectParameter("Area", typeof(string));
    
            var aplicativoParameter = aplicativo != null ?
                new ObjectParameter("Aplicativo", aplicativo) :
                new ObjectParameter("Aplicativo", typeof(string));
    
            var alcanceParameter = alcance != null ?
                new ObjectParameter("Alcance", alcance) :
                new ObjectParameter("Alcance", typeof(string));
    
            var fechaSolicitudParameter = fechaSolicitud.HasValue ?
                new ObjectParameter("FechaSolicitud", fechaSolicitud) :
                new ObjectParameter("FechaSolicitud", typeof(System.DateTime));
    
            var prioridadParameter = prioridad != null ?
                new ObjectParameter("Prioridad", prioridad) :
                new ObjectParameter("Prioridad", typeof(string));
    
            var ingenieroParameter = ingeniero != null ?
                new ObjectParameter("Ingeniero", ingeniero) :
                new ObjectParameter("Ingeniero", typeof(string));
    
            var diasDesarrolloParameter = diasDesarrollo.HasValue ?
                new ObjectParameter("DiasDesarrollo", diasDesarrollo) :
                new ObjectParameter("DiasDesarrollo", typeof(int));
    
            var fechaDesarrolloParameter = fechaDesarrollo.HasValue ?
                new ObjectParameter("FechaDesarrollo", fechaDesarrollo) :
                new ObjectParameter("FechaDesarrollo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspGuardarRequerimientos", areaParameter, aplicativoParameter, alcanceParameter, fechaSolicitudParameter, prioridadParameter, ingenieroParameter, diasDesarrolloParameter, fechaDesarrolloParameter);
        }
    
        public virtual int uspEliminarRequerimientos(Nullable<int> idRegristro)
        {
            var idRegristroParameter = idRegristro.HasValue ?
                new ObjectParameter("IdRegristro", idRegristro) :
                new ObjectParameter("IdRegristro", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspEliminarRequerimientos", idRegristroParameter);
        }
    
        public virtual int uspActualizarRequerimientos(Nullable<int> id, string area, string aplicativo, string alcance, Nullable<System.DateTime> fechaSolicitud, string prioridad, string ingeniero, Nullable<int> diasDesarrollo, Nullable<System.DateTime> fechaDesarrollo)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var areaParameter = area != null ?
                new ObjectParameter("Area", area) :
                new ObjectParameter("Area", typeof(string));
    
            var aplicativoParameter = aplicativo != null ?
                new ObjectParameter("Aplicativo", aplicativo) :
                new ObjectParameter("Aplicativo", typeof(string));
    
            var alcanceParameter = alcance != null ?
                new ObjectParameter("Alcance", alcance) :
                new ObjectParameter("Alcance", typeof(string));
    
            var fechaSolicitudParameter = fechaSolicitud.HasValue ?
                new ObjectParameter("FechaSolicitud", fechaSolicitud) :
                new ObjectParameter("FechaSolicitud", typeof(System.DateTime));
    
            var prioridadParameter = prioridad != null ?
                new ObjectParameter("Prioridad", prioridad) :
                new ObjectParameter("Prioridad", typeof(string));
    
            var ingenieroParameter = ingeniero != null ?
                new ObjectParameter("Ingeniero", ingeniero) :
                new ObjectParameter("Ingeniero", typeof(string));
    
            var diasDesarrolloParameter = diasDesarrollo.HasValue ?
                new ObjectParameter("DiasDesarrollo", diasDesarrollo) :
                new ObjectParameter("DiasDesarrollo", typeof(int));
    
            var fechaDesarrolloParameter = fechaDesarrollo.HasValue ?
                new ObjectParameter("FechaDesarrollo", fechaDesarrollo) :
                new ObjectParameter("FechaDesarrollo", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("uspActualizarRequerimientos", idParameter, areaParameter, aplicativoParameter, alcanceParameter, fechaSolicitudParameter, prioridadParameter, ingenieroParameter, diasDesarrolloParameter, fechaDesarrolloParameter);
        }
    }
}
